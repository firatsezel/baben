{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","size","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","console","log","classes","makeStyles","theme","root","maxWidth","backgroundColor","palette","background","paper","listSection","ul","padding","ListTab","styled","ListTabItem","li","React","spe","kah","at","tabColors","setTabColors","isOrderGave","style","flexGrow","Button","onClick","color","variant","List","className","subheader","id","title","map","sectionId","key","ListSubheader","item","ListItem","flexDirection","marginTop","marginRight","display","alignSelf","fontSize","marginLeft","border","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bad7cee6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport styled from \"styled-components\";\nimport Button from '@material-ui/core/Button';\nimport { green, purple } from '@material-ui/core/colors';\n\n\n\nfunction App() {\n  const size = useWindowSize();\n  console.log('size', size);\n  // const classes = useStyles();\n  const classes = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      maxWidth: size.width,\n      backgroundColor: theme.palette.background.paper,\n    },\n    listSection: {\n      backgroundColor: 'inherit',\n    },\n    ul: {\n      backgroundColor: 'inherit',\n      padding: 0,\n    },\n  }));\n  const ListTab = styled.ul`\n  overflow-x: auto;\n  width: ${size.width};\n  list-style: none;\n  background: papayawhip;\n  white-space: nowrap;\n  padding: 0;\n  `;\n  const ListTabItem = styled.li`\n  display: inline-block;\n  background: transparent;\n  margin-right: 8px;\n  `;\n  let scrollViewRef = \"\";\n  const [tabColors, setTabColors] = React.useState({ spe: \"\", kah: \"\", at: \"\" });\n  const [isOrderGave, setisOrderGave] = React.useState(false);\n\n  return (\n    <div style={{ flexGrow: 1 }}>\n    <div>\n      <ListTab>\n        <ListTabItem><Button onClick={() => {\n            setTabColors({ spe: \"primary\", kah: \"\", at: \"\" });\n          }} color={tabColors.spe} variant=\"outlined\">Spesiyaller</Button></ListTabItem>\n        <ListTabItem><Button onClick={() => setTabColors({ spe: \"\", kah: \"primary\", at: \"\" })} color={tabColors.kah} variant=\"outlined\">Kahvaltılar</Button></ListTabItem>\n        <ListTabItem><Button onClick={() => setTabColors({ spe: \"\", kah: \"\", at: \"primary\" })} color={tabColors.at} variant=\"outlined\">Atıştırmalıklar</Button></ListTabItem>\n      </ListTab>\n    </div>\n    <List className={classes.root} subheader={<li />}>\n      {[{ id: 0, title: 'Spesiyaller' }, { id: 1, title: 'Kahvaltılar' }, { id: 2, title: 'Atıştırmalıklar' }].map((sectionId) => (\n        <li key={`section-${sectionId.id}`} className={classes.listSection}>\n          <ul className={classes.ul}>\n            <ListSubheader >{`${sectionId.title}`}</ListSubheader>\n            {[0, 1, 2].map((item) => (\n              <ListItem style={{ width: size.width, flexDirection: 'space-between', marginTop: 5}} key={`item-${sectionId.id}-${item}`}>\n                <div style={{ height: 30, marginRight: 60 }}>\n                  <div style={{ display: 'flex',height: 30 }}>\n                    <span style={{ alignSelf: 'center', color: 'black', fontSize: 30 }}>Ihlara</span>\n                    <span style={{ alignSelf: 'flex-end', color: 'black', fontSize: 12, marginLeft: 5 }}>Soslu ızgara kemiksiz but</span>\n                  </div>\n                  <div style={{ marginLeft: 50, height: 15 }}>\n                    <span style={{ alignSelf: 'flex-start', color: 'black', fontSize: 10 }}>Pilav, Patates Kızartması, Haşlanmış Sebze ile</span>\n                  </div>\n                </div>\n                \n                {/* <ListItemText primary={`Ihlara`} /> */}\n                \n                <div className=\"border-radiusImportant\" style={{ border: '2px solid purple', display: 'flex', width: 60, backgroundColor: 'transparent', height: 20 }}>\n                  <button type=\"button\" onClick={() => setTabColors({ spe: \"\", kah: \"primary\", at: \"\" })} className=\"plusbuttons\" style={{ width: 20, backgroundColor: 'purple', height: 20 }}>\n                    <span style={{ alignSelf: 'center', color: 'white' }}>-</span>\n                  </button>\n                  <div className=\"plusbuttons\" style={{ width: 20, backgroundColor: 'white', height: 20 }}>\n                    <span style={{ alignSelf: 'center' }}>0</span>\n                  </div>\n                  <button type=\"button\" className=\"plusbuttons\" style={{ width: 20, backgroundColor: 'purple', height: 20 }}>\n                    <span style={{ alignSelf: 'center', color: 'white' }}>+</span>\n                  </button>\n                </div>\n              </ListItem>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </List>\n      {!isOrderGave ?\n        <div style={{ width: size.width, height: 30, backgroundColor: 'red' }}>\n        \n        </div> \n        :\n        null\n      }\n      \n    </div>\n  );\n}\n\n// Hook\nfunction useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}